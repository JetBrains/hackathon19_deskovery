/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
extern "C" {
    pub fn deskovery_motor(
        pwrLeft: crate::compat::libc::c_int,
        pwrRight: crate::compat::libc::c_int,
        recovery: bool,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrxData {
    pub alarmRatio10: crate::compat::libc::c_int,
    pub alarms: [bool; 4usize],
    pub alarm: bool,
    pub darkResponse: [crate::compat::libc::c_int; 4usize],
    pub lightResponse: [crate::compat::libc::c_int; 4usize],
}
#[test]
fn bindgen_test_layout_PrxData() {
    assert_eq!(
        ::core::mem::size_of::<PrxData>(),
        44usize,
        concat!("Size of: ", stringify!(PrxData))
    );
    assert_eq!(
        ::core::mem::align_of::<PrxData>(),
        4usize,
        concat!("Alignment of ", stringify!(PrxData))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PrxData>())).alarmRatio10 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PrxData),
            "::",
            stringify!(alarmRatio10)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PrxData>())).alarms as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PrxData),
            "::",
            stringify!(alarms)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PrxData>())).alarm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PrxData),
            "::",
            stringify!(alarm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PrxData>())).darkResponse as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PrxData),
            "::",
            stringify!(darkResponse)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PrxData>())).lightResponse as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PrxData),
            "::",
            stringify!(lightResponse)
        )
    );
}
extern "C" {
    pub static mut prxData: PrxData;
}
extern "C" {
    pub fn left_ticks() -> crate::compat::libc::c_long;
}
extern "C" {
    pub fn right_ticks() -> crate::compat::libc::c_long;
}
extern "C" {
    pub fn radar_range() -> crate::compat::libc::c_int;
}
extern "C" {
    pub fn system_ticks() -> crate::compat::libc::c_ulong;
}
extern "C" {
    pub fn led_control(on: bool);
}
extern "C" {
    pub fn display_bg_control(brightness: crate::compat::libc::c_int);
}
extern "C" {
    pub fn LCD5110_write_char(c: crate::compat::libc::c_uchar);
}
extern "C" {
    pub fn LCD5110_clear();
}
extern "C" {
    pub fn LCD5110_set_XY(X: crate::compat::libc::c_uchar, Y: crate::compat::libc::c_uchar);
}
extern "C" {
    pub fn LCD5110_write_bytes(
        s: *const crate::compat::libc::c_uchar,
        len: crate::compat::libc::c_uint,
    );
}
extern "C" {
    pub fn LCD5110_write_pict(p: *const crate::compat::libc::c_uchar);
}
extern "C" {
    pub fn delay_ms(ms: crate::compat::libc::c_long);
}
extern "C" {
    pub fn debug_output(p: *const crate::compat::libc::c_uchar, len: crate::compat::libc::c_uint);
}
extern "C" {
    pub fn uart_output(p: *const crate::compat::libc::c_uchar, len: crate::compat::libc::c_int);
}
extern "C" {
    pub fn uart_input(
        p: *const crate::compat::libc::c_uchar,
        maxLen: crate::compat::libc::c_int,
    ) -> crate::compat::libc::c_int;
}
extern "C" {
    pub fn idle();
}
extern "C" {
    pub fn Error_Handler();
}
